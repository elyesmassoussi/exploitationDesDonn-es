package org.exemple.population.function.parser;

import org.apache.spark.sql.Row;
import org.apache.spark.sql.catalyst.expressions.GenericRowWithSchema;
import org.apache.spark.sql.types.DataTypes;
import org.apache.spark.sql.types.Metadata;
import org.apache.spark.sql.types.StructField;
import org.apache.spark.sql.types.StructType;
import org.example.entities.beans.Population;
import org.example.entities.functions.RowToPopulation;
import static org.assertj.core.api.Assertions.assertThat;

import org.junit.Test;



public class RowToPopulationTest {


    @Test
    public void testApply() {
        RowToPopulation f = new RowToPopulation();


        StructType shema =new StructType(
                new StructField[]{
                        new StructField(
                                "Annee",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "Population municipale",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "Population comptee  part",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "Population totale",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),


                }
        );
        String[] value=new String[]{"a", "b","c", "d"};
        Row s = new GenericRowWithSchema(value, shema);
        //Row r1 = RowFactory.create("a", "b","c", "d","e", "f","g","h","i","j","k" );
        Population expected= Population.builder()
                .annee("a")
                .popMunicipale("b")
                .popComptee("c")
                .popTotale("d")
                .build();
        Population actual = f.apply(s);

        assertThat(actual).isEqualTo(expected);
    }
}
